//Ispas Alexandra-Petrina 322CDb

*fileio
    -contains classes used for reading input data
    Consumer-has all the necessary entities for a consumer
            -when the consumer doesn't have money to pay for the first time,
            he is 'in dept' and a dept is set. When this happens for the second time,
            he becomes bankrupt.
    CostChanges-stores 'monthly updates'
    Distributor-sores the data for a distributor. The field 'in dept' is used in the same
                way as for a consumer.
    Input-has all the data from the input file.
    InputLoader-reads from the json file and stores data in Input.

*main
    -for the implementation, I created 2 classes: one is for modifying the input field
    according to the zero turn and the other one computes the 'numberOfTurns' turns.
    I used the factory design pattern with these classes. In each class I used singleton
    pattern to create an instance.
*solver
    -AllTurns-for each turn, applies cost changes for distributors and gets the cheapest
    one. The class removes a month from the contracts of the old consumers and makes
    modifications if their contract ends. New consumers get the cheapest distributor.
    The budget is set for all the consumers and distributors' fields are updated. If
    after the updates, the best distributor is bankrupt, the next cheapest one is found.
    -Turn-interface user for the factory design pattern
    -TurnFactory-implements factory design pattern and creates an object based on the
    number of turns required
    -TurnZero-preforms the zero turn
*output
    -I created new classes where I store the data which needs to be written in the output
    file.
    -ComputeOutput-creates the actual output object
    -Writer-writes the object to the specified path